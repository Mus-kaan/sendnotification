#################################################################################
#                           OneBranch Pipelines                                 #
# EasyStart:      https://aka.ms/obpipelines/easystart/samples                  #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                    #
#################################################################################

trigger: # https://aka.ms/obpipelines/triggers
  branches:
    include:
      - main

parameters: # parameters are shown up in ADO UI in a build queue time
  - name: "debug"
    displayName: "Enable debug output"
    type: boolean
    default: true

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  system.debug: ${{ parameters.debug }}

  MajorVersion: 1
  MinorVersion: 2009

  WindowsContainerImage: "cdpxwin1809.azurecr.io/global/vse2019:latest" # Docker image which is used to build the project https://aka.ms/obpipelines/containers

resources:
  repositories:
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/OneBranch.Official.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    globalSdl: # https://aka.ms/obpipelines/sdl
      tsa:
        enabled: true # SDL results of non-official builds aren't uploaded to TSA by default.
      credscan:
        enabled: true
      policheck:
        break: true # always break the build on policheck issues. You can disable it by setting to 'false'
      binskim:
        enabled: true
        analyzeTargetGlob: |
          **/Microsoft.Liftr.*.dll
          **/Microsoft.Liftr.*.exe
      cg:
        failOnAlert: true
      sbom:
        enabled: true

    stages:
      - stage: build
        jobs:
        - job: main
          pool:
            type: windows  # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs
          
          variables: # More settings at https://aka.ms/obpipelines/yaml/jobs
              ob_outputDirectory: '$(Build.SourcesDirectory)\bin' # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
              # https://aka.ms/obpipelines/sdl
              ob_sdl_binskim_enabled: true # you can disable sdl tools in non-official build
              ob_sdl_binskim_break: true # always break the build on binskim issues. You can disable it by setting to 'false'
              ob_sdl_binskim_scanOutputDirectoryOnly: true
              ob_sdl_roslyn_break: true
            
          steps: # These steps will be run in unrestricted container's network
                      
            - task: onebranch.pipeline.version@1 # generates automatic version. For other versioning options check https://aka.ms/obpipelines/versioning
              displayName: 'Setup BuildNumber'
              inputs:
                system: 'buildrevision'
                major: "$(MajorVersion)"
                minor: "$(MinorVersion)"
                exclude_commit: false

            - task: NuGetCommand@2
              inputs:
                command: 'custom'
                arguments: 'config -configfile $(Build.SourcesDirectory)\src\NuGet.Config'

            - task: CmdLine@2
              displayName: 'Restore'
              inputs:
                script: '$(Build.SourcesDirectory)\build\run-windows-restore.cmd'

            - task: CmdLine@2
              displayName: 'Build'
              inputs:
                script: '$(Build.SourcesDirectory)\build\run-windows-build.cmd'

            - task: onebranch.pipeline.signing@1 # https://aka.ms/obpipelines/signing
              displayName: "Sign build outputs"
              inputs:
                command: "sign"
                signing_environment: "azure-ado"
                signing_profile: "internal_azure_service"
                files_to_sign: "**/*.exe;**/*.dll"
                search_root: '$(Build.SourcesDirectory)\src'

            - task: CopyFiles@2 # https://docs.microsoft.com/azure/devops/pipelines/tasks/utility/copy-files
              displayName: 'Copy build output to upload folder'
              inputs:
                SourceFolder: '$(Build.SourcesDirectory)\src'
                Contents: |
                  **\bin\Release\**\Microsoft.Liftr.*.dll
                  **\bin\Release\**\Microsoft.Liftr.*.exe
                  !**\*.Tests\**
                  !**\*.Tests.*\**
                  !**\Samples\**
                  !**\BaseImageBuilder\**
                  !**\Deployment.Runner\**
                TargetFolder: '$(ob_outputDirectory)\build\bin'

            - task: CmdLine@2
              displayName: 'Package Geneva Actions'
              inputs:
                script: '$(Build.SourcesDirectory)\build\run-windows-pack-acis.cmd'

            - task: CopyFiles@2
              displayName: "Copy package contents"
              inputs:
                SourceFolder: '$(Build.SourcesDirectory)\out'
                Contents: |
                  **\*.Package
                TargetFolder: '$(ob_outputDirectory)\out'

            - task: onebranch.pipeline.signing@1 # https://aka.ms/obpipelines/signing
              displayName: "Sign Geneva Actions Packages"
              inputs:
                command: "sign"
                signing_profile: "143360024"
                files_to_sign: "**/*.Package"
                search_root: '$(ob_outputDirectory)\out'